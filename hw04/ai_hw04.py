# -*- coding: utf-8 -*-
"""ai_hw04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GjECP2A5kQ1f_AnVBYM5E5K8zX6JSrUh
"""

import os

if not os.path.isdir("HappyML"):
  os.system("git clone https://github.com/cnchi/HappyML.git")

Dataset_File = "Voice.csv"
if not os.path.isfile(Dataset_File):
  os.system("wget https://raw.githubusercontent.com/cnchi/datasets/master/" + Dataset_File)

import HappyML.preprocessor as pp
dataset = pp.dataset(file=Dataset_File)

"""切分自變數與應變數"""

X, Y = pp.decomposition(dataset=dataset, x_columns=[i for i in range(20)], y_columns=[20])

"""類別資料數位化"""

#X = pp.onehot_encoder(X, columns=[i for i in range(20)], remove_trap=True)
Y = pp.label_encoder(Y)

"""切分訓練集、測試集與特徵縮放"""

# Split Training vs. Testing Data
X_train, X_test, Y_train, Y_test = pp.split_train_test(x_ary=X, y_ary=Y)

# Feature Scaling
X_train, X_test = pp.feature_scaling(fit_ary=X_train, transform_arys=(X_train, X_test))

"""模型建置"""

import HappyML.neural_networks as nn

# Model Create & Compile with HappyML (using Formula #1)
model = nn.create_seq_model(nodes=[X_train.shape[1], 38, 19, 1],
              output_activation="sigmoid", # 二選一激活函數
              loss_name="binary_crossentropy") # 二選一損失函數

"""模型校正"""

# Model Training
epochs_metrics = model.fit(x=X_train, y=Y_train, validation_split=0.2, batch_size=10, epochs=100, callbacks=[tensorboard_callback])

# Commented out IPython magic to ensure Python compatibility.
# Load the TensorBoard notebook extension
# %load_ext tensorboard

# Create TensorBoard log directory
import os
from datetime import datetime
from tensorflow.keras.callbacks import TensorBoard

logdir = os.path.join("logs", datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = TensorBoard(logdir, histogram_freq=1)

# Commented out IPython magic to ensure Python compatibility.
# Start the TensorBoard
# %tensorboard --logdir logs

"""模型訓練"""

# Model Training
epochs_metrics = model.fit(x=X_train, y=Y_train, validation_split=0.2, batch_size=10, epochs=60)

"""預測答案"""

# Predict
import pandas as pd
Y_pred = model.predict(x=X_test).astype(int)
Y_pred = pd.DataFrame(Y_pred, index=Y_test.index, columns=Y_test.columns)

# Show the Predict Result
df = pd.concat([Y_test, Y_pred], axis=1)
print(df)

"""模型評估"""

test_loss, test_acc = model.evaluate(X_test, Y_test)
print("Loss of Testing Set:", test_loss)
print("Accuracy of Testing Set:", test_acc)
