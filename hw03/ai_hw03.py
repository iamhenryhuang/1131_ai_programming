# -*- coding: utf-8 -*-
"""ai_hw03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1itvVuSzgTlUIjZi8cECFWowVDqTRwVpz

載入 HappyML 函式庫
"""

import os

if not os.path.isdir("HappyML"):
  os.system("git clone https://github.com/cnchi/HappyML.git")

"""透過 GitHub，下載資料集 .CSV 檔案"""

Dataset_File = "ToyotaUsedCars.csv"
if not os.path.isfile(Dataset_File):
  os.system("wget https://raw.githubusercontent.com/cnchi/datasets/master/" + Dataset_File)

"""資料集載入"""

import HappyML.preprocessor as pp
dataset = pp.dataset(file=Dataset_File)

"""切分自變數 X 與 應變數 Y"""

X, Y = pp.decomposition(dataset=dataset, x_columns=[i for i in range(8)], y_columns=[8])

"""類別資料數位化"""

X = pp.onehot_encoder(X, columns=[0, 2, 4], remove_trap=True)

"""切分 訓練集 跟 測試集"""

X_train, X_test, Y_train, Y_test = pp.split_train_test(X, Y, train_size=0.8)

"""特徵縮放"""

X_train, X_test = pp.feature_scaling(fit_ary=X_train, transform_arys=(X_train, X_test))

"""建構神經網路各層級"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input

# Add Layers with .add() function
model = Sequential()

# Using Formula #2, Instance=20640, alpha=5
model.add(Input(shape=(X_train.shape[1], )))
model.add(Dense(units=459, kernel_initializer="glorot_normal", activation="relu"))
model.add(Dense(units=9, kernel_initializer="glorot_normal", activation="relu"))
model.add(Dense(units=1, kernel_initializer="glorot_normal", activation="linear"))

"""神經網路模型編譯"""

# Compile the whole Neural Networks
model.compile(optimizer="adam", loss="mse", metrics=["mse"])

"""神經網路模型訓練"""

# Training (Fit)
epochs_metrics = model.fit(x=X_train, y=Y_train, validation_split=0.2, batch_size=5, epochs=50)

"""模型校正"""

# Model Adjustment
import HappyML.model_drawer as md

md.epochs_metrics_plot(epochs_metrics.history, keys=("loss", "val_loss"), title="Loss of Training vs. Validating", xyLabel=("Epochs", "Loss"))
md.epochs_metrics_plot(epochs_metrics.history, keys=("mse", "val_mse"), title="MSE of Training vs. Validating", xyLabel=("Epochs", "MSE"))

"""預測價格"""

# Predict
import pandas as pd
Y_pred = pd.DataFrame(model.predict(x=X_test), index=Y_test.index, columns=Y_test.columns)

# Show the Predict Result
df = pd.concat([Y_test, Y_pred], axis=1)
print(df)

"""模型評估"""

# Evaluation
test_loss, test_mse = model.evaluate(X_test, Y_test)
print("Loss of Testing Set:", test_loss)
print("MSE of Testing Set:", test_mse)